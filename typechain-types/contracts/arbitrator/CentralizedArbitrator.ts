/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CentralizedArbitratorInterface extends utils.Interface {
  functions: {
    "LOSER_APPEAL_PERIOD_MULTIPLIER()": FunctionFragment;
    "LOSER_STAKE_MULTIPLIER()": FunctionFragment;
    "MULTIPLIER_DIVISOR()": FunctionFragment;
    "WINNER_STAKE_MULTIPLIER()": FunctionFragment;
    "appealDuration()": FunctionFragment;
    "appealFee()": FunctionFragment;
    "appealPeriod(uint256)": FunctionFragment;
    "arbitrationCost(bytes)": FunctionFragment;
    "createDispute(uint256,bytes)": FunctionFragment;
    "disputeIDtoRoundArray(uint256,uint256)": FunctionFragment;
    "disputes(uint256)": FunctionFragment;
    "fundAppeal(uint256,uint256)": FunctionFragment;
    "fundingStatus(uint256,uint256)": FunctionFragment;
    "giveRuling(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "setAppealDuration(uint256)": FunctionFragment;
    "setAppealFee(uint256)": FunctionFragment;
    "setArbitrationFee(uint256)": FunctionFragment;
    "withdrawFeesAndRewards(uint256,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LOSER_APPEAL_PERIOD_MULTIPLIER"
      | "LOSER_STAKE_MULTIPLIER"
      | "MULTIPLIER_DIVISOR"
      | "WINNER_STAKE_MULTIPLIER"
      | "appealDuration"
      | "appealFee"
      | "appealPeriod"
      | "arbitrationCost"
      | "createDispute"
      | "disputeIDtoRoundArray"
      | "disputes"
      | "fundAppeal"
      | "fundingStatus"
      | "giveRuling"
      | "owner"
      | "setAppealDuration"
      | "setAppealFee"
      | "setArbitrationFee"
      | "withdrawFeesAndRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LOSER_APPEAL_PERIOD_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOSER_STAKE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WINNER_STAKE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appealDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appealFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "appealPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationCost",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDispute",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeIDtoRoundArray",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAppeal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "giveRuling",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAppealDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAppealFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeesAndRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "LOSER_APPEAL_PERIOD_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOSER_STAKE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTIPLIER_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WINNER_STAKE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appealDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appealFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "appealPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeIDtoRoundArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundAppeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "giveRuling", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAppealDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAppealFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeesAndRewards",
    data: BytesLike
  ): Result;

  events: {
    "AppealDecision(uint256,address)": EventFragment;
    "AppealPossible(uint256,address)": EventFragment;
    "ChoiceFunded(uint256,uint256,uint256)": EventFragment;
    "Contribution(uint256,uint256,uint256,address,uint256)": EventFragment;
    "DisputeCreation(uint256,address)": EventFragment;
    "Withdrawal(uint256,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppealDecision"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppealPossible"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChoiceFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface AppealDecisionEventObject {
  _disputeID: BigNumber;
  _arbitrable: string;
}
export type AppealDecisionEvent = TypedEvent<
  [BigNumber, string],
  AppealDecisionEventObject
>;

export type AppealDecisionEventFilter = TypedEventFilter<AppealDecisionEvent>;

export interface AppealPossibleEventObject {
  _disputeID: BigNumber;
  _arbitrable: string;
}
export type AppealPossibleEvent = TypedEvent<
  [BigNumber, string],
  AppealPossibleEventObject
>;

export type AppealPossibleEventFilter = TypedEventFilter<AppealPossibleEvent>;

export interface ChoiceFundedEventObject {
  _disputeID: BigNumber;
  _round: BigNumber;
  _choice: BigNumber;
}
export type ChoiceFundedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ChoiceFundedEventObject
>;

export type ChoiceFundedEventFilter = TypedEventFilter<ChoiceFundedEvent>;

export interface ContributionEventObject {
  _disputeID: BigNumber;
  _round: BigNumber;
  _choice: BigNumber;
  _contributor: string;
  _amount: BigNumber;
}
export type ContributionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  ContributionEventObject
>;

export type ContributionEventFilter = TypedEventFilter<ContributionEvent>;

export interface DisputeCreationEventObject {
  _disputeID: BigNumber;
  _arbitrable: string;
}
export type DisputeCreationEvent = TypedEvent<
  [BigNumber, string],
  DisputeCreationEventObject
>;

export type DisputeCreationEventFilter = TypedEventFilter<DisputeCreationEvent>;

export interface WithdrawalEventObject {
  _disputeID: BigNumber;
  _round: BigNumber;
  _choice: BigNumber;
  _contributor: string;
  _amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface CentralizedArbitrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CentralizedArbitratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LOSER_APPEAL_PERIOD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LOSER_STAKE_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MULTIPLIER_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    WINNER_STAKE_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    appealDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    appealFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    appealPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    arbitrationCost(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    createDispute(
      _choices: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputeIDtoRoundArray(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeRewards: BigNumber }>;

    disputes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        arbitrated: string;
        arbitratorExtraData: string;
        choices: BigNumber;
        appealPeriodStart: BigNumber;
        arbitrationFee: BigNumber;
        ruling: BigNumber;
        status: number;
      }
    >;

    fundAppeal(
      _disputeID: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundingStatus(
      _disputeID: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { funded: BigNumber; goal: BigNumber }>;

    giveRuling(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAppealDuration(
      _appealDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAppealFee(
      _appealFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArbitrationFee(
      _arbitrationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFeesAndRewards(
      _disputeID: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      _round: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LOSER_APPEAL_PERIOD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  LOSER_STAKE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  MULTIPLIER_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  WINNER_STAKE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  appealDuration(overrides?: CallOverrides): Promise<BigNumber>;

  appealFee(overrides?: CallOverrides): Promise<BigNumber>;

  appealPeriod(
    _disputeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

  arbitrationCost(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createDispute(
    _choices: PromiseOrValue<BigNumberish>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputeIDtoRoundArray(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disputes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      arbitrated: string;
      arbitratorExtraData: string;
      choices: BigNumber;
      appealPeriodStart: BigNumber;
      arbitrationFee: BigNumber;
      ruling: BigNumber;
      status: number;
    }
  >;

  fundAppeal(
    _disputeID: PromiseOrValue<BigNumberish>,
    _choice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundingStatus(
    _disputeID: PromiseOrValue<BigNumberish>,
    _choice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { funded: BigNumber; goal: BigNumber }>;

  giveRuling(
    _disputeID: PromiseOrValue<BigNumberish>,
    _ruling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAppealDuration(
    _appealDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAppealFee(
    _appealFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArbitrationFee(
    _arbitrationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFeesAndRewards(
    _disputeID: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    _round: PromiseOrValue<BigNumberish>,
    _choice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LOSER_APPEAL_PERIOD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LOSER_STAKE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    WINNER_STAKE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    appealDuration(overrides?: CallOverrides): Promise<BigNumber>;

    appealFee(overrides?: CallOverrides): Promise<BigNumber>;

    appealPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    arbitrationCost(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDispute(
      _choices: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeIDtoRoundArray(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        arbitrated: string;
        arbitratorExtraData: string;
        choices: BigNumber;
        appealPeriodStart: BigNumber;
        arbitrationFee: BigNumber;
        ruling: BigNumber;
        status: number;
      }
    >;

    fundAppeal(
      _disputeID: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundingStatus(
      _disputeID: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { funded: BigNumber; goal: BigNumber }>;

    giveRuling(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAppealDuration(
      _appealDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAppealFee(
      _appealFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrationFee(
      _arbitrationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFeesAndRewards(
      _disputeID: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      _round: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AppealDecision(uint256,address)"(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _arbitrable?: PromiseOrValue<string> | null
    ): AppealDecisionEventFilter;
    AppealDecision(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _arbitrable?: PromiseOrValue<string> | null
    ): AppealDecisionEventFilter;

    "AppealPossible(uint256,address)"(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _arbitrable?: PromiseOrValue<string> | null
    ): AppealPossibleEventFilter;
    AppealPossible(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _arbitrable?: PromiseOrValue<string> | null
    ): AppealPossibleEventFilter;

    "ChoiceFunded(uint256,uint256,uint256)"(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _round?: PromiseOrValue<BigNumberish> | null,
      _choice?: PromiseOrValue<BigNumberish> | null
    ): ChoiceFundedEventFilter;
    ChoiceFunded(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _round?: PromiseOrValue<BigNumberish> | null,
      _choice?: PromiseOrValue<BigNumberish> | null
    ): ChoiceFundedEventFilter;

    "Contribution(uint256,uint256,uint256,address,uint256)"(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _round?: PromiseOrValue<BigNumberish> | null,
      _choice?: null,
      _contributor?: PromiseOrValue<string> | null,
      _amount?: null
    ): ContributionEventFilter;
    Contribution(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _round?: PromiseOrValue<BigNumberish> | null,
      _choice?: null,
      _contributor?: PromiseOrValue<string> | null,
      _amount?: null
    ): ContributionEventFilter;

    "DisputeCreation(uint256,address)"(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _arbitrable?: PromiseOrValue<string> | null
    ): DisputeCreationEventFilter;
    DisputeCreation(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _arbitrable?: PromiseOrValue<string> | null
    ): DisputeCreationEventFilter;

    "Withdrawal(uint256,uint256,uint256,address,uint256)"(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _round?: PromiseOrValue<BigNumberish> | null,
      _choice?: null,
      _contributor?: PromiseOrValue<string> | null,
      _amount?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _round?: PromiseOrValue<BigNumberish> | null,
      _choice?: null,
      _contributor?: PromiseOrValue<string> | null,
      _amount?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    LOSER_APPEAL_PERIOD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LOSER_STAKE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    WINNER_STAKE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    appealDuration(overrides?: CallOverrides): Promise<BigNumber>;

    appealFee(overrides?: CallOverrides): Promise<BigNumber>;

    appealPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitrationCost(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDispute(
      _choices: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputeIDtoRoundArray(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundAppeal(
      _disputeID: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundingStatus(
      _disputeID: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    giveRuling(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAppealDuration(
      _appealDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAppealFee(
      _appealFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArbitrationFee(
      _arbitrationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFeesAndRewards(
      _disputeID: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      _round: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LOSER_APPEAL_PERIOD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LOSER_STAKE_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MULTIPLIER_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WINNER_STAKE_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appealDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appealFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appealPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrationCost(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDispute(
      _choices: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputeIDtoRoundArray(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundAppeal(
      _disputeID: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundingStatus(
      _disputeID: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    giveRuling(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAppealDuration(
      _appealDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAppealFee(
      _appealFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArbitrationFee(
      _arbitrationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeesAndRewards(
      _disputeID: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      _round: PromiseOrValue<BigNumberish>,
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
