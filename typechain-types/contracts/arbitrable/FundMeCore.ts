/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace FundMeCore {
  export type MilestoneStruct = {
    amountUnlockable: PromiseOrValue<BigNumberish>;
    amountClaimed: PromiseOrValue<BigNumberish>;
    disputeFeeReceiver: PromiseOrValue<BigNumberish>;
    disputeFeeFunders: PromiseOrValue<BigNumberish>;
    disputeId: PromiseOrValue<BigNumberish>;
    disputePayerForFunders: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type MilestoneStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    amountUnlockable: BigNumber;
    amountClaimed: BigNumber;
    disputeFeeReceiver: BigNumber;
    disputeFeeFunders: BigNumber;
    disputeId: BigNumber;
    disputePayerForFunders: string;
    status: number;
  };

  export type TransactionStruct = {
    receiver: PromiseOrValue<string>;
    totalFunded: PromiseOrValue<BigNumberish>;
    milestones: FundMeCore.MilestoneStruct[];
    remainingMilestonesAmountUnlockable: PromiseOrValue<BigNumberish>[];
    crowdfundToken: PromiseOrValue<string>;
    voteToken: PromiseOrValue<string>;
  };

  export type TransactionStructOutput = [
    string,
    BigNumber,
    FundMeCore.MilestoneStructOutput[],
    BigNumber[],
    string,
    string
  ] & {
    receiver: string;
    totalFunded: BigNumber;
    milestones: FundMeCore.MilestoneStructOutput[];
    remainingMilestonesAmountUnlockable: BigNumber[];
    crowdfundToken: string;
    voteToken: string;
  };
}

export interface FundMeCoreInterface extends utils.Interface {
  functions: {
    "allowedNumberOfMilestones()": FunctionFragment;
    "appeal(uint256)": FunctionFragment;
    "arbitrator()": FunctionFragment;
    "changeAllowedNumberOfMilestones(uint16)": FunctionFragment;
    "changeCreateTransactionCost(uint256)": FunctionFragment;
    "changeTransactionReceiver(uint256,address)": FunctionFragment;
    "claimMilestone(uint256,uint256)": FunctionFragment;
    "createTransaction(uint256[],address,string)": FunctionFragment;
    "disputeIdToTransactionId(uint256)": FunctionFragment;
    "fundTransaction(uint256,uint256)": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
    "getTransactionMilestone(uint256,uint16)": FunctionFragment;
    "governor()": FunctionFragment;
    "makeVoteToken(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "payDisputeFeeByHolders(uint256)": FunctionFragment;
    "payDisputeFeeByTeam(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rule(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "timeoutByHolders(uint256)": FunctionFragment;
    "timeoutByTeam(uint256)": FunctionFragment;
    "transactionAddressAmountFunded(uint256,address)": FunctionFragment;
    "transactionIdCounter()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowedNumberOfMilestones"
      | "appeal"
      | "arbitrator"
      | "changeAllowedNumberOfMilestones"
      | "changeCreateTransactionCost"
      | "changeTransactionReceiver"
      | "claimMilestone"
      | "createTransaction"
      | "disputeIdToTransactionId"
      | "fundTransaction"
      | "getTransaction"
      | "getTransactionMilestone"
      | "governor"
      | "makeVoteToken"
      | "owner"
      | "payDisputeFeeByHolders"
      | "payDisputeFeeByTeam"
      | "renounceOwnership"
      | "rule"
      | "supportsInterface"
      | "timeoutByHolders"
      | "timeoutByTeam"
      | "transactionAddressAmountFunded"
      | "transactionIdCounter"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowedNumberOfMilestones",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appeal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAllowedNumberOfMilestones",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCreateTransactionCost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTransactionReceiver",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMilestone",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransaction",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeIdToTransactionId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundTransaction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionMilestone",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeVoteToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payDisputeFeeByHolders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payDisputeFeeByTeam",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutByHolders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutByTeam",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionAddressAmountFunded",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedNumberOfMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAllowedNumberOfMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCreateTransactionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTransactionReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeIdToTransactionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeVoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payDisputeFeeByHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payDisputeFeeByTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutByHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutByTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionAddressAmountFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Dispute(address,uint256,uint256,uint256)": EventFragment;
    "Evidence(address,uint256,address,string)": EventFragment;
    "FundTransaction(uint256,uint256)": EventFragment;
    "MetaEvidence(uint256,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Ruling(address,uint256,uint256)": EventFragment;
    "TransactionCreated(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Evidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaEvidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ruling"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionCreated"): EventFragment;
}

export interface DisputeEventObject {
  _arbitrator: string;
  _disputeID: BigNumber;
  _metaEvidenceID: BigNumber;
  _evidenceGroupID: BigNumber;
}
export type DisputeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DisputeEventObject
>;

export type DisputeEventFilter = TypedEventFilter<DisputeEvent>;

export interface EvidenceEventObject {
  _arbitrator: string;
  _evidenceGroupID: BigNumber;
  _party: string;
  _evidence: string;
}
export type EvidenceEvent = TypedEvent<
  [string, BigNumber, string, string],
  EvidenceEventObject
>;

export type EvidenceEventFilter = TypedEventFilter<EvidenceEvent>;

export interface FundTransactionEventObject {
  _transactionID: BigNumber;
  _amountFunded: BigNumber;
}
export type FundTransactionEvent = TypedEvent<
  [BigNumber, BigNumber],
  FundTransactionEventObject
>;

export type FundTransactionEventFilter = TypedEventFilter<FundTransactionEvent>;

export interface MetaEvidenceEventObject {
  _metaEvidenceID: BigNumber;
  _evidence: string;
}
export type MetaEvidenceEvent = TypedEvent<
  [BigNumber, string],
  MetaEvidenceEventObject
>;

export type MetaEvidenceEventFilter = TypedEventFilter<MetaEvidenceEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RulingEventObject {
  _arbitrator: string;
  _disputeID: BigNumber;
  _ruling: BigNumber;
}
export type RulingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RulingEventObject
>;

export type RulingEventFilter = TypedEventFilter<RulingEvent>;

export interface TransactionCreatedEventObject {
  _transactionID: BigNumber;
  _receiver: string;
  _crowdFundToken: string;
}
export type TransactionCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  TransactionCreatedEventObject
>;

export type TransactionCreatedEventFilter =
  TypedEventFilter<TransactionCreatedEvent>;

export interface FundMeCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FundMeCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowedNumberOfMilestones(overrides?: CallOverrides): Promise<[number]>;

    appeal(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbitrator(overrides?: CallOverrides): Promise<[string]>;

    changeAllowedNumberOfMilestones(
      _allowedNumberOfMilestones: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeCreateTransactionCost(
      _createTransactionCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTransactionReceiver(
      transactionId: PromiseOrValue<BigNumberish>,
      newTransactionReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMilestone(
      _milestoneID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTransaction(
      _milestoneAmountUnlockable: PromiseOrValue<BigNumberish>[],
      _crowdfundToken: PromiseOrValue<string>,
      _metaEvidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputeIdToTransactionId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      _amountFunded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [FundMeCore.TransactionStructOutput] & {
        _transaction: FundMeCore.TransactionStructOutput;
      }
    >;

    getTransactionMilestone(
      transactionId: PromiseOrValue<BigNumberish>,
      milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [FundMeCore.MilestoneStructOutput] & {
        _milestone: FundMeCore.MilestoneStructOutput;
      }
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    makeVoteToken(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payDisputeFeeByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payDisputeFeeByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timeoutByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeoutByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transactionAddressAmountFunded(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transactionIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowedNumberOfMilestones(overrides?: CallOverrides): Promise<number>;

  appeal(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbitrator(overrides?: CallOverrides): Promise<string>;

  changeAllowedNumberOfMilestones(
    _allowedNumberOfMilestones: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeCreateTransactionCost(
    _createTransactionCost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTransactionReceiver(
    transactionId: PromiseOrValue<BigNumberish>,
    newTransactionReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMilestone(
    _milestoneID: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTransaction(
    _milestoneAmountUnlockable: PromiseOrValue<BigNumberish>[],
    _crowdfundToken: PromiseOrValue<string>,
    _metaEvidence: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputeIdToTransactionId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundTransaction(
    _transactionId: PromiseOrValue<BigNumberish>,
    _amountFunded: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTransaction(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FundMeCore.TransactionStructOutput>;

  getTransactionMilestone(
    transactionId: PromiseOrValue<BigNumberish>,
    milestoneId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FundMeCore.MilestoneStructOutput>;

  governor(overrides?: CallOverrides): Promise<string>;

  makeVoteToken(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payDisputeFeeByHolders(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payDisputeFeeByTeam(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rule(
    _disputeID: PromiseOrValue<BigNumberish>,
    _ruling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timeoutByHolders(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeoutByTeam(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transactionAddressAmountFunded(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transactionIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowedNumberOfMilestones(overrides?: CallOverrides): Promise<number>;

    appeal(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    arbitrator(overrides?: CallOverrides): Promise<string>;

    changeAllowedNumberOfMilestones(
      _allowedNumberOfMilestones: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeCreateTransactionCost(
      _createTransactionCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTransactionReceiver(
      transactionId: PromiseOrValue<BigNumberish>,
      newTransactionReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMilestone(
      _milestoneID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createTransaction(
      _milestoneAmountUnlockable: PromiseOrValue<BigNumberish>[],
      _crowdfundToken: PromiseOrValue<string>,
      _metaEvidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeIdToTransactionId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      _amountFunded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FundMeCore.TransactionStructOutput>;

    getTransactionMilestone(
      transactionId: PromiseOrValue<BigNumberish>,
      milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FundMeCore.MilestoneStructOutput>;

    governor(overrides?: CallOverrides): Promise<string>;

    makeVoteToken(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payDisputeFeeByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payDisputeFeeByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timeoutByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeoutByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transactionAddressAmountFunded(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Dispute(address,uint256,uint256,uint256)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;
    Dispute(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;

    "Evidence(address,uint256,address,string)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _evidenceGroupID?: PromiseOrValue<BigNumberish> | null,
      _party?: PromiseOrValue<string> | null,
      _evidence?: null
    ): EvidenceEventFilter;
    Evidence(
      _arbitrator?: PromiseOrValue<string> | null,
      _evidenceGroupID?: PromiseOrValue<BigNumberish> | null,
      _party?: PromiseOrValue<string> | null,
      _evidence?: null
    ): EvidenceEventFilter;

    "FundTransaction(uint256,uint256)"(
      _transactionID?: PromiseOrValue<BigNumberish> | null,
      _amountFunded?: null
    ): FundTransactionEventFilter;
    FundTransaction(
      _transactionID?: PromiseOrValue<BigNumberish> | null,
      _amountFunded?: null
    ): FundTransactionEventFilter;

    "MetaEvidence(uint256,string)"(
      _metaEvidenceID?: PromiseOrValue<BigNumberish> | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;
    MetaEvidence(
      _metaEvidenceID?: PromiseOrValue<BigNumberish> | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Ruling(address,uint256,uint256)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _ruling?: null
    ): RulingEventFilter;
    Ruling(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _ruling?: null
    ): RulingEventFilter;

    "TransactionCreated(uint256,address,address)"(
      _transactionID?: PromiseOrValue<BigNumberish> | null,
      _receiver?: PromiseOrValue<string> | null,
      _crowdFundToken?: PromiseOrValue<string> | null
    ): TransactionCreatedEventFilter;
    TransactionCreated(
      _transactionID?: PromiseOrValue<BigNumberish> | null,
      _receiver?: PromiseOrValue<string> | null,
      _crowdFundToken?: PromiseOrValue<string> | null
    ): TransactionCreatedEventFilter;
  };

  estimateGas: {
    allowedNumberOfMilestones(overrides?: CallOverrides): Promise<BigNumber>;

    appeal(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbitrator(overrides?: CallOverrides): Promise<BigNumber>;

    changeAllowedNumberOfMilestones(
      _allowedNumberOfMilestones: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeCreateTransactionCost(
      _createTransactionCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTransactionReceiver(
      transactionId: PromiseOrValue<BigNumberish>,
      newTransactionReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMilestone(
      _milestoneID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTransaction(
      _milestoneAmountUnlockable: PromiseOrValue<BigNumberish>[],
      _crowdfundToken: PromiseOrValue<string>,
      _metaEvidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputeIdToTransactionId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      _amountFunded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionMilestone(
      transactionId: PromiseOrValue<BigNumberish>,
      milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    makeVoteToken(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payDisputeFeeByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payDisputeFeeByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeoutByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeoutByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transactionAddressAmountFunded(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedNumberOfMilestones(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appeal(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbitrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAllowedNumberOfMilestones(
      _allowedNumberOfMilestones: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeCreateTransactionCost(
      _createTransactionCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTransactionReceiver(
      transactionId: PromiseOrValue<BigNumberish>,
      newTransactionReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMilestone(
      _milestoneID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTransaction(
      _milestoneAmountUnlockable: PromiseOrValue<BigNumberish>[],
      _crowdfundToken: PromiseOrValue<string>,
      _metaEvidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputeIdToTransactionId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundTransaction(
      _transactionId: PromiseOrValue<BigNumberish>,
      _amountFunded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionMilestone(
      transactionId: PromiseOrValue<BigNumberish>,
      milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeVoteToken(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payDisputeFeeByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payDisputeFeeByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeoutByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeoutByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transactionAddressAmountFunded(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionIdCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
