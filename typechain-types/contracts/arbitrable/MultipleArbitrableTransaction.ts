/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MultipleArbitrableTransactionInterface
  extends utils.Interface {
  functions: {
    "arbitratorExtraData()": FunctionFragment;
    "disputeIDtoTransactionID(uint256)": FunctionFragment;
    "rule(uint256,uint256)": FunctionFragment;
    "timeOutByReceiver(uint256)": FunctionFragment;
    "arbitrator()": FunctionFragment;
    "payArbitrationFeeByReceiver(uint256)": FunctionFragment;
    "payArbitrationFeeBySender(uint256)": FunctionFragment;
    "appeal(uint256)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "getCountTransactions()": FunctionFragment;
    "submitEvidence(uint256,string)": FunctionFragment;
    "feeTimeout()": FunctionFragment;
    "createTransaction(uint256,address,string)": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "pay(uint256,uint256)": FunctionFragment;
    "timeOutBySender(uint256)": FunctionFragment;
    "getTransactionIDsByAddress(address)": FunctionFragment;
    "reimburse(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arbitratorExtraData"
      | "disputeIDtoTransactionID"
      | "rule"
      | "timeOutByReceiver"
      | "arbitrator"
      | "payArbitrationFeeByReceiver"
      | "payArbitrationFeeBySender"
      | "appeal"
      | "transactions"
      | "getCountTransactions"
      | "submitEvidence"
      | "feeTimeout"
      | "createTransaction"
      | "executeTransaction"
      | "pay"
      | "timeOutBySender"
      | "getTransactionIDsByAddress"
      | "reimburse"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arbitratorExtraData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeIDtoTransactionID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeOutByReceiver",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payArbitrationFeeByReceiver",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payArbitrationFeeBySender",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "appeal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeOutBySender",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionIDsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reimburse",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "arbitratorExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeIDtoTransactionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeOutByReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payArbitrationFeeByReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payArbitrationFeeBySender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTimeout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeOutBySender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionIDsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reimburse", data: BytesLike): Result;

  events: {
    "Payment(uint256,uint256,address)": EventFragment;
    "HasToPayFee(uint256,uint8)": EventFragment;
    "Ruling(address,uint256,uint256)": EventFragment;
    "TransactionCreated(uint256,address,address,uint256)": EventFragment;
    "MetaEvidence(uint256,string)": EventFragment;
    "Dispute(address,uint256,uint256,uint256)": EventFragment;
    "Evidence(address,uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Payment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HasToPayFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ruling"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaEvidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Evidence"): EventFragment;
}

export interface PaymentEventObject {
  _transactionID: BigNumber;
  _amount: BigNumber;
  _party: string;
}
export type PaymentEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  PaymentEventObject
>;

export type PaymentEventFilter = TypedEventFilter<PaymentEvent>;

export interface HasToPayFeeEventObject {
  _transactionID: BigNumber;
  _party: number;
}
export type HasToPayFeeEvent = TypedEvent<
  [BigNumber, number],
  HasToPayFeeEventObject
>;

export type HasToPayFeeEventFilter = TypedEventFilter<HasToPayFeeEvent>;

export interface RulingEventObject {
  _arbitrator: string;
  _disputeID: BigNumber;
  _ruling: BigNumber;
}
export type RulingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RulingEventObject
>;

export type RulingEventFilter = TypedEventFilter<RulingEvent>;

export interface TransactionCreatedEventObject {
  _transactionID: BigNumber;
  _sender: string;
  _receiver: string;
  _amount: BigNumber;
}
export type TransactionCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  TransactionCreatedEventObject
>;

export type TransactionCreatedEventFilter =
  TypedEventFilter<TransactionCreatedEvent>;

export interface MetaEvidenceEventObject {
  _metaEvidenceID: BigNumber;
  _evidence: string;
}
export type MetaEvidenceEvent = TypedEvent<
  [BigNumber, string],
  MetaEvidenceEventObject
>;

export type MetaEvidenceEventFilter = TypedEventFilter<MetaEvidenceEvent>;

export interface DisputeEventObject {
  _arbitrator: string;
  _disputeID: BigNumber;
  _metaEvidenceID: BigNumber;
  _evidenceGroupID: BigNumber;
}
export type DisputeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DisputeEventObject
>;

export type DisputeEventFilter = TypedEventFilter<DisputeEvent>;

export interface EvidenceEventObject {
  _arbitrator: string;
  _evidenceGroupID: BigNumber;
  _party: string;
  _evidence: string;
}
export type EvidenceEvent = TypedEvent<
  [string, BigNumber, string, string],
  EvidenceEventObject
>;

export type EvidenceEventFilter = TypedEventFilter<EvidenceEvent>;

export interface MultipleArbitrableTransaction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultipleArbitrableTransactionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbitratorExtraData(overrides?: CallOverrides): Promise<[string]>;

    disputeIDtoTransactionID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeOutByReceiver(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbitrator(overrides?: CallOverrides): Promise<[string]>;

    payArbitrationFeeByReceiver(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payArbitrationFeeBySender(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    appeal(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        sender: string;
        receiver: string;
        amount: BigNumber;
        timeoutPayment: BigNumber;
        disputeId: BigNumber;
        senderFee: BigNumber;
        receiverFee: BigNumber;
        lastInteraction: BigNumber;
        status: number;
      }
    >;

    getCountTransactions(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { countTransactions: BigNumber }>;

    submitEvidence(
      _transactionID: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    createTransaction(
      _timeoutPayment: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _metaEvidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pay(
      _transactionID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeOutBySender(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTransactionIDsByAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { transactionIDs: BigNumber[] }>;

    reimburse(
      _transactionID: PromiseOrValue<BigNumberish>,
      _amountReimbursed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  arbitratorExtraData(overrides?: CallOverrides): Promise<string>;

  disputeIDtoTransactionID(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rule(
    _disputeID: PromiseOrValue<BigNumberish>,
    _ruling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeOutByReceiver(
    _transactionID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbitrator(overrides?: CallOverrides): Promise<string>;

  payArbitrationFeeByReceiver(
    _transactionID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payArbitrationFeeBySender(
    _transactionID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  appeal(
    _transactionID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      sender: string;
      receiver: string;
      amount: BigNumber;
      timeoutPayment: BigNumber;
      disputeId: BigNumber;
      senderFee: BigNumber;
      receiverFee: BigNumber;
      lastInteraction: BigNumber;
      status: number;
    }
  >;

  getCountTransactions(overrides?: CallOverrides): Promise<BigNumber>;

  submitEvidence(
    _transactionID: PromiseOrValue<BigNumberish>,
    _evidence: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  createTransaction(
    _timeoutPayment: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _metaEvidence: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    _transactionID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pay(
    _transactionID: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeOutBySender(
    _transactionID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTransactionIDsByAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  reimburse(
    _transactionID: PromiseOrValue<BigNumberish>,
    _amountReimbursed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arbitratorExtraData(overrides?: CallOverrides): Promise<string>;

    disputeIDtoTransactionID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeOutByReceiver(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    arbitrator(overrides?: CallOverrides): Promise<string>;

    payArbitrationFeeByReceiver(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payArbitrationFeeBySender(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    appeal(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        sender: string;
        receiver: string;
        amount: BigNumber;
        timeoutPayment: BigNumber;
        disputeId: BigNumber;
        senderFee: BigNumber;
        receiverFee: BigNumber;
        lastInteraction: BigNumber;
        status: number;
      }
    >;

    getCountTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    submitEvidence(
      _transactionID: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    createTransaction(
      _timeoutPayment: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _metaEvidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTransaction(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pay(
      _transactionID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeOutBySender(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTransactionIDsByAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    reimburse(
      _transactionID: PromiseOrValue<BigNumberish>,
      _amountReimbursed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Payment(uint256,uint256,address)"(
      _transactionID?: PromiseOrValue<BigNumberish> | null,
      _amount?: null,
      _party?: null
    ): PaymentEventFilter;
    Payment(
      _transactionID?: PromiseOrValue<BigNumberish> | null,
      _amount?: null,
      _party?: null
    ): PaymentEventFilter;

    "HasToPayFee(uint256,uint8)"(
      _transactionID?: PromiseOrValue<BigNumberish> | null,
      _party?: null
    ): HasToPayFeeEventFilter;
    HasToPayFee(
      _transactionID?: PromiseOrValue<BigNumberish> | null,
      _party?: null
    ): HasToPayFeeEventFilter;

    "Ruling(address,uint256,uint256)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _ruling?: null
    ): RulingEventFilter;
    Ruling(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _ruling?: null
    ): RulingEventFilter;

    "TransactionCreated(uint256,address,address,uint256)"(
      _transactionID?: null,
      _sender?: PromiseOrValue<string> | null,
      _receiver?: PromiseOrValue<string> | null,
      _amount?: null
    ): TransactionCreatedEventFilter;
    TransactionCreated(
      _transactionID?: null,
      _sender?: PromiseOrValue<string> | null,
      _receiver?: PromiseOrValue<string> | null,
      _amount?: null
    ): TransactionCreatedEventFilter;

    "MetaEvidence(uint256,string)"(
      _metaEvidenceID?: PromiseOrValue<BigNumberish> | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;
    MetaEvidence(
      _metaEvidenceID?: PromiseOrValue<BigNumberish> | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;

    "Dispute(address,uint256,uint256,uint256)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;
    Dispute(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;

    "Evidence(address,uint256,address,string)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _evidenceGroupID?: PromiseOrValue<BigNumberish> | null,
      _party?: PromiseOrValue<string> | null,
      _evidence?: null
    ): EvidenceEventFilter;
    Evidence(
      _arbitrator?: PromiseOrValue<string> | null,
      _evidenceGroupID?: PromiseOrValue<BigNumberish> | null,
      _party?: PromiseOrValue<string> | null,
      _evidence?: null
    ): EvidenceEventFilter;
  };

  estimateGas: {
    arbitratorExtraData(overrides?: CallOverrides): Promise<BigNumber>;

    disputeIDtoTransactionID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeOutByReceiver(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbitrator(overrides?: CallOverrides): Promise<BigNumber>;

    payArbitrationFeeByReceiver(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payArbitrationFeeBySender(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    appeal(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    submitEvidence(
      _transactionID: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    createTransaction(
      _timeoutPayment: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _metaEvidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pay(
      _transactionID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeOutBySender(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTransactionIDsByAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reimburse(
      _transactionID: PromiseOrValue<BigNumberish>,
      _amountReimbursed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbitratorExtraData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeIDtoTransactionID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeOutByReceiver(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbitrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payArbitrationFeeByReceiver(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payArbitrationFeeBySender(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    appeal(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitEvidence(
      _transactionID: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createTransaction(
      _timeoutPayment: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _metaEvidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pay(
      _transactionID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeOutBySender(
      _transactionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTransactionIDsByAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reimburse(
      _transactionID: PromiseOrValue<BigNumberish>,
      _amountReimbursed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
