/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface FundingVaultInterface extends utils.Interface {
  functions: {
    "funder()": FunctionFragment;
    "arbitratorExtraData()": FunctionFragment;
    "claimToWithdrawTime()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "rule(uint256,uint256)": FunctionFragment;
    "timeoutByTeam(uint256)": FunctionFragment;
    "fundMilestone()": FunctionFragment;
    "changeTeam(address)": FunctionFragment;
    "arbitrator()": FunctionFragment;
    "payDisputeFeeByTeam(uint256)": FunctionFragment;
    "timeout()": FunctionFragment;
    "appeal(uint256)": FunctionFragment;
    "team()": FunctionFragment;
    "additionalTimeToWithdraw()": FunctionFragment;
    "makeVoteToken(uint256)": FunctionFragment;
    "claimMilestone(uint256,uint256)": FunctionFragment;
    "payDisputeFeeByHolders(uint256)": FunctionFragment;
    "milestones(uint256)": FunctionFragment;
    "disputeIDToMilstoneID(uint256)": FunctionFragment;
    "disputeThreshold()": FunctionFragment;
    "timeoutByHolders(uint256)": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "funder"
      | "arbitratorExtraData"
      | "claimToWithdrawTime"
      | "withdraw"
      | "rule"
      | "timeoutByTeam"
      | "fundMilestone"
      | "changeTeam"
      | "arbitrator"
      | "payDisputeFeeByTeam"
      | "timeout"
      | "appeal"
      | "team"
      | "additionalTimeToWithdraw"
      | "makeVoteToken"
      | "claimMilestone"
      | "payDisputeFeeByHolders"
      | "milestones"
      | "disputeIDToMilstoneID"
      | "disputeThreshold"
      | "timeoutByHolders"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "funder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "arbitratorExtraData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimToWithdrawTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutByTeam",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundMilestone",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeTeam",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payDisputeFeeByTeam",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "timeout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "appeal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "team", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "additionalTimeToWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeVoteToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMilestone",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payDisputeFeeByHolders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeIDToMilstoneID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutByHolders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "funder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimToWithdrawTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeoutByTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payDisputeFeeByTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "team", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "additionalTimeToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeVoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payDisputeFeeByHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeIDToMilstoneID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutByHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "MetaEvidence(uint256,string)": EventFragment;
    "Dispute(address,uint256,uint256,uint256)": EventFragment;
    "Evidence(address,uint256,address,string)": EventFragment;
    "Ruling(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MetaEvidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Evidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ruling"): EventFragment;
}

export interface MetaEvidenceEventObject {
  _metaEvidenceID: BigNumber;
  _evidence: string;
}
export type MetaEvidenceEvent = TypedEvent<
  [BigNumber, string],
  MetaEvidenceEventObject
>;

export type MetaEvidenceEventFilter = TypedEventFilter<MetaEvidenceEvent>;

export interface DisputeEventObject {
  _arbitrator: string;
  _disputeID: BigNumber;
  _metaEvidenceID: BigNumber;
  _evidenceGroupID: BigNumber;
}
export type DisputeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DisputeEventObject
>;

export type DisputeEventFilter = TypedEventFilter<DisputeEvent>;

export interface EvidenceEventObject {
  _arbitrator: string;
  _evidenceGroupID: BigNumber;
  _party: string;
  _evidence: string;
}
export type EvidenceEvent = TypedEvent<
  [string, BigNumber, string, string],
  EvidenceEventObject
>;

export type EvidenceEventFilter = TypedEventFilter<EvidenceEvent>;

export interface RulingEventObject {
  _arbitrator: string;
  _disputeID: BigNumber;
  _ruling: BigNumber;
}
export type RulingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RulingEventObject
>;

export type RulingEventFilter = TypedEventFilter<RulingEvent>;

export interface FundingVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FundingVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    funder(overrides?: CallOverrides): Promise<[string]>;

    arbitratorExtraData(overrides?: CallOverrides): Promise<[string]>;

    claimToWithdrawTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeoutByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundMilestone(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTeam(
      _newTeam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbitrator(overrides?: CallOverrides): Promise<[string]>;

    payDisputeFeeByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    appeal(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    team(overrides?: CallOverrides): Promise<[string]>;

    additionalTimeToWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeVoteToken(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMilestone(
      _milestoneID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payDisputeFeeByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    milestones(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        amount: BigNumber;
        amountClaimed: BigNumber;
        claimTime: BigNumber;
        disputed: boolean;
        feeTeam: BigNumber;
        feeHolders: BigNumber;
        voteToken: string;
        disputeID: BigNumber;
        lastTotalFeePayment: BigNumber;
        lastTotalFeePaymentIsTeam: boolean;
        payerForHolders: string;
      }
    >;

    disputeIDToMilstoneID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disputeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeoutByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  funder(overrides?: CallOverrides): Promise<string>;

  arbitratorExtraData(overrides?: CallOverrides): Promise<string>;

  claimToWithdrawTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rule(
    _disputeID: PromiseOrValue<BigNumberish>,
    _ruling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeoutByTeam(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundMilestone(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTeam(
    _newTeam: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbitrator(overrides?: CallOverrides): Promise<string>;

  payDisputeFeeByTeam(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeout(overrides?: CallOverrides): Promise<BigNumber>;

  appeal(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  team(overrides?: CallOverrides): Promise<string>;

  additionalTimeToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  makeVoteToken(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMilestone(
    _milestoneID: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payDisputeFeeByHolders(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  milestones(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      amount: BigNumber;
      amountClaimed: BigNumber;
      claimTime: BigNumber;
      disputed: boolean;
      feeTeam: BigNumber;
      feeHolders: BigNumber;
      voteToken: string;
      disputeID: BigNumber;
      lastTotalFeePayment: BigNumber;
      lastTotalFeePaymentIsTeam: boolean;
      payerForHolders: string;
    }
  >;

  disputeIDToMilstoneID(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disputeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  timeoutByHolders(
    _milestoneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    funder(overrides?: CallOverrides): Promise<string>;

    arbitratorExtraData(overrides?: CallOverrides): Promise<string>;

    claimToWithdrawTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeoutByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundMilestone(overrides?: CallOverrides): Promise<BigNumber>;

    changeTeam(
      _newTeam: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    arbitrator(overrides?: CallOverrides): Promise<string>;

    payDisputeFeeByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeout(overrides?: CallOverrides): Promise<BigNumber>;

    appeal(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    team(overrides?: CallOverrides): Promise<string>;

    additionalTimeToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    makeVoteToken(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMilestone(
      _milestoneID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payDisputeFeeByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    milestones(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        amount: BigNumber;
        amountClaimed: BigNumber;
        claimTime: BigNumber;
        disputed: boolean;
        feeTeam: BigNumber;
        feeHolders: BigNumber;
        voteToken: string;
        disputeID: BigNumber;
        lastTotalFeePayment: BigNumber;
        lastTotalFeePaymentIsTeam: boolean;
        payerForHolders: string;
      }
    >;

    disputeIDToMilstoneID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    timeoutByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MetaEvidence(uint256,string)"(
      _metaEvidenceID?: PromiseOrValue<BigNumberish> | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;
    MetaEvidence(
      _metaEvidenceID?: PromiseOrValue<BigNumberish> | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;

    "Dispute(address,uint256,uint256,uint256)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;
    Dispute(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;

    "Evidence(address,uint256,address,string)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _evidenceGroupID?: PromiseOrValue<BigNumberish> | null,
      _party?: PromiseOrValue<string> | null,
      _evidence?: null
    ): EvidenceEventFilter;
    Evidence(
      _arbitrator?: PromiseOrValue<string> | null,
      _evidenceGroupID?: PromiseOrValue<BigNumberish> | null,
      _party?: PromiseOrValue<string> | null,
      _evidence?: null
    ): EvidenceEventFilter;

    "Ruling(address,uint256,uint256)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _ruling?: null
    ): RulingEventFilter;
    Ruling(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _ruling?: null
    ): RulingEventFilter;
  };

  estimateGas: {
    funder(overrides?: CallOverrides): Promise<BigNumber>;

    arbitratorExtraData(overrides?: CallOverrides): Promise<BigNumber>;

    claimToWithdrawTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeoutByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundMilestone(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTeam(
      _newTeam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbitrator(overrides?: CallOverrides): Promise<BigNumber>;

    payDisputeFeeByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeout(overrides?: CallOverrides): Promise<BigNumber>;

    appeal(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    team(overrides?: CallOverrides): Promise<BigNumber>;

    additionalTimeToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    makeVoteToken(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMilestone(
      _milestoneID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payDisputeFeeByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    milestones(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeIDToMilstoneID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    timeoutByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    funder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitratorExtraData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimToWithdrawTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rule(
      _disputeID: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeoutByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundMilestone(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTeam(
      _newTeam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbitrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payDisputeFeeByTeam(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appeal(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    team(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    additionalTimeToWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeVoteToken(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMilestone(
      _milestoneID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payDisputeFeeByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    milestones(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeIDToMilstoneID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeoutByHolders(
      _milestoneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
