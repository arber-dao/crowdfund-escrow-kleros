/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IFundMeErrors,
  IFundMeErrorsInterface,
} from "../../../contracts/interfaces/IFundMeErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "erc20",
        type: "address",
      },
    ],
    name: "FundMe__ERC20TransferUnsuccessful",
    type: "error",
  },
  {
    inputs: [],
    name: "FundMe__FundMeContractAddressInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "FundMe__MilestoneAmountUnlockablePercentageNot1",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "erc20",
        type: "address",
      },
    ],
    name: "FundMe__NonCompliantERC20",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requiredReceiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "FundMe__OnlyTransactionReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountRequired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountSent",
        type: "uint256",
      },
    ],
    name: "FundMe__PaymentTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "FundMe__TooManyMilestonesInitilized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
    ],
    name: "FundMe__TransactionNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "FundMe__ZeroAddressInvalid",
    type: "error",
  },
];

export class IFundMeErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IFundMeErrorsInterface {
    return new utils.Interface(_abi) as IFundMeErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IFundMeErrors {
    return new Contract(address, _abi, signerOrProvider) as IFundMeErrors;
  }
}
